import streamlit as st
import math, cmath, cairo, random
import numpy as np
from PIL import Image
import io
import os
from datetime import datetime
import base64

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="üé® Generador Mosaicos Penrose con Texturas",
    page_icon="üé®",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
    <style>
    .main-header {
        text-align: center;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin-bottom: 2rem;
    }
    .pattern-preview {
        border: 2px solid #ddd;
        border-radius: 10px;
        padding: 1rem;
        text-align: center;
    }
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
    .texture-info {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    </style>
""", unsafe_allow_html=True)

# Definici√≥n de paletas basadas en teor√≠a del color
PALETAS_TEXTURAS = {
    'Fuego': {
        'texturas': ['rosa', 'amarillo', 'naranja'],
        'descripcion': 'üî• An√°loga C√°lida - Rosa, Amarillo, Naranja',
        'teoria': 'Colores an√°logos en el espectro c√°lido para energ√≠a y dinamismo'
    },
    'Oc√©ano': {
        'texturas': ['azul', 'verde', 'gris 1'],
        'descripcion': 'üåä An√°loga Fr√≠a - Azul, Verde, Gris',
        'teoria': 'Colores fr√≠os consecutivos que transmiten calma y naturaleza'
    },
    'Contraste': {
        'texturas': ['azul', 'naranja', 'blanco1'],
        'descripcion': '‚ö° Complementaria - Azul, Naranja, Blanco',
        'teoria': 'Colores opuestos que crean m√°ximo impacto visual'
    },
    'Elegante': {
        'texturas': ['gris2', 'gris 1', 'blanco 4', 'blanco1'],
        'descripcion': 'üèõÔ∏è Monocrom√°tica - Escala de Grises',
        'teoria': 'Escala de valores en un solo tono para sofisticaci√≥n'
    },
    'Tri√°dica': {
        'texturas': ['rosa', 'verde', 'amarillo'],
        'descripcion': 'üé® Tri√°dica Vibrante - Rosa, Verde, Amarillo',
        'teoria': 'Tres colores equidistantes para balance din√°mico'
    }
}

@st.cache_data
def cargar_texturas_streamlit():
    """Carga texturas para Streamlit con manejo de errores"""
    texturas = {}
    nombres_texturas = [
        "verde.png", "blanco1.png", "naranja.png", 
        "blanco2.png", "azul.png", "blanco 3.png", "gris 1.png", 
        "gris2.png", "blanco 4.png", "amarillo.png", "rosa.png"
    ]
    
    texturas_encontradas = []
    texturas_faltantes = []
    
    for nombre in nombres_texturas:
        nombre_limpio = nombre.replace('.png', '')
        try:
            if os.path.exists(nombre):
                texture = Image.open(nombre)
                # Mantener tama√±o original para mejor calidad en murales
                # Solo redimensionar si es extremadamente grande
                if texture.size[0] > 1000 or texture.size[1] > 1000:
                    # Redimensionar manteniendo proporci√≥n
                    texture.thumbnail((800, 800), Image.Resampling.LANCZOS)
                
                texturas[nombre_limpio] = {
                    'array': np.array(texture),
                    'size': texture.size,
                    'pil': texture
                }
                texturas_encontradas.append(nombre)
            else:
                texturas_faltantes.append(nombre)
        except Exception as e:
            texturas_faltantes.append(f"{nombre} (Error: {str(e)})")
    
    return texturas, texturas_encontradas, texturas_faltantes

def aplicar_textura_a_triangulo_individual(ctx, vertices, textura_info, escala_textura=2.0):
    """Aplica una textura espec√≠fica a un tri√°ngulo individual"""
    if not textura_info:
        return False
    
    # Obtener dimensiones del tri√°ngulo
    xs = [v.real for v in vertices]
    ys = [v.imag for v in vertices]
    min_x, max_x = min(xs), max(xs)
    min_y, max_y = min(ys), max(ys)
    
    ancho_triangulo = max_x - min_x
    alto_triangulo = max_y - min_y
    
    # Obtener textura PIL
    texture_pil = textura_info['pil']
    
    # Calcular tama√±o de textura para llenar el tri√°ngulo
    tamano_textura = max(int(ancho_triangulo * 300), int(alto_triangulo * 300))  # Escalar para Cairo
    tamano_textura = max(100, min(tamano_textura, 800))  # Limitar tama√±o
    
    # Aplicar escala de usuario
    tamano_final = int(tamano_textura * escala_textura)
    
    # Redimensionar textura para el tri√°ngulo
    texture_resized = texture_pil.resize((tamano_final, tamano_final), Image.Resampling.LANCZOS)
    
    # Convertir a RGBA
    if texture_resized.mode != 'RGBA':
        texture_resized = texture_resized.convert('RGBA')
    
    # Crear surface de Cairo para esta textura
    texture_array = np.array(texture_resized)
    height, width = texture_array.shape[:2]
    
    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
    buf = surface.get_data()
    
    # Convertir RGBA a BGRA para Cairo
    if len(texture_array.shape) == 3 and texture_array.shape[2] == 4:
        bgra_array = texture_array[:, :, [2, 1, 0, 3]]
    elif len(texture_array.shape) == 3 and texture_array.shape[2] == 3:
        bgr_array = texture_array[:, :, [2, 1, 0]]
        bgra_array = np.dstack([bgr_array, np.full((height, width), 255, dtype=np.uint8)])
    else:
        return False
    
    # Copiar datos
    buf_array = np.frombuffer(buf, dtype=np.uint8).reshape((height, width, 4))
    buf_array[:] = bgra_array
    surface.mark_dirty()
    
    # Crear patr√≥n y aplicar transformaci√≥n para ajustar al tri√°ngulo
    pattern = cairo.SurfacePattern(surface)
    
    # Matriz de transformaci√≥n para ajustar la textura al tri√°ngulo
    matrix = cairo.Matrix()
    
    # Escalar la textura para que se ajuste al tama√±o del tri√°ngulo
    escala_x = width / ancho_triangulo
    escala_y = height / alto_triangulo
    
    # Trasladar para centrar en el tri√°ngulo
    matrix.translate(-min_x * escala_x, -min_y * escala_y)
    matrix.scale(escala_x, escala_y)
    
    pattern.set_matrix(matrix)
    pattern.set_extend(cairo.EXTEND_PAD)  # No repetir, usar padding
    
    # Aplicar patr√≥n
    ctx.set_source(pattern)
    return True

@st.cache_data
def generate_penrose_tiles_with_textures(divisions, resolution, paleta_nombre, accent_pattern, line_width, escala_textura, _texturas_dict):
    """
    Generador Penrose con texturas en lugar de colores s√≥lidos
    """
    
    if paleta_nombre not in PALETAS_TEXTURAS:
        st.error(f"Paleta '{paleta_nombre}' no encontrada")
        return None, {}
    
    paleta_info = PALETAS_TEXTURAS[paleta_nombre]
    texturas_paleta = paleta_info['texturas']
    
    # Verificar texturas disponibles
    texturas_disponibles = []
    for tex_nombre in texturas_paleta:
        if tex_nombre in _texturas_dict:
            texturas_disponibles.append(tex_nombre)
    
    if not texturas_disponibles:
        st.error(f"No hay texturas disponibles para la paleta '{paleta_nombre}'")
        return None, {}
    
    r1, r2 = resolution
    phi = (5 ** 0.5 + 1) / 2
    
    # Configurar Cairo
    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, r1, r2)
    ctx = cairo.Context(surface)
    
    # Transformaciones
    scale = min(r1, r2) * 0.4
    ctx.scale(scale, scale)
    ctx.translate(0.5 * r1/scale, 0.5 * r2/scale)
    
    # Fondo blanco
    ctx.set_source_rgb(1.0, 1.0, 1.0)
    ctx.paint()
    
    def generate_penrose_rhombi(divisions):
        base = 5
        triangles = []
        
        for i in range(base * 2):
            v2 = cmath.rect(1, (2*i - 1) * math.pi / (base * 2))
            v3 = cmath.rect(1, (2*i + 1) * math.pi / (base * 2))
            
            if i % 2 == 0:
                v2, v3 = v3, v2
            
            triangles.append(("thin", 0+0j, v2, v3))
        
        for iteration in range(divisions):
            new_triangles = []
            
            for shape, v1, v2, v3 in triangles:
                if shape == "thin":
                    p1 = v1 + (v2 - v1) / phi
                    new_triangles.append(("thin", v3, p1, v2))
                    new_triangles.append(("thick", p1, v3, v1))
                else:
                    p2 = v2 + (v1 - v2) / phi
                    p3 = v2 + (v3 - v2) / phi
                    new_triangles.append(("thick", p3, v3, v1))
                    new_triangles.append(("thick", p2, p3, v2))
                    new_triangles.append(("thin", p3, p2, v1))
            
            triangles = new_triangles
        
        return triangles
    
    def should_use_accent_texture(triangle, pattern):
        if pattern is None or pattern == 'Ninguno':
            return False
            
        shape, v1, v2, v3 = triangle
        center = (v1 + v2 + v3) / 3
        distance = abs(center)
        angle = cmath.phase(center) % (2 * math.pi)
        
        if pattern == 'center_star':
            return distance < 0.3
        elif pattern == 'outer_ring':
            return distance > 0.6
        elif pattern == 'radial_bands':
            band_angle = angle * 6 / (2 * math.pi)
            return int(band_angle) % 2 == 0
        elif pattern == 'spiral_arms':
            spiral_angle = (angle + distance * 2 * math.pi) % (2 * math.pi)
            arm_width = 0.4
            arm_spacing = 2 * math.pi / 5
            
            for i in range(5):
                arm_center = i * arm_spacing
                if abs(spiral_angle - arm_center) < arm_width or \
                   abs(spiral_angle - arm_center - 2*math.pi) < arm_width:
                    return distance > 0.2 and distance < 0.8
            return False
        elif pattern == 'diamond_cross':
            x, y = center.real, center.imag
            main_cross = (abs(x) < 0.15 and abs(y) < 0.6) or \
                        (abs(y) < 0.15 and abs(x) < 0.6)
            diagonal_cross = (abs(x - y) < 0.12 and distance < 0.6) or \
                           (abs(x + y) < 0.12 and distance < 0.6)
            return main_cross or diagonal_cross
        elif pattern == 'petal_flower':
            if distance < 0.15 or distance > 0.7:
                return False
            petal_function = math.sin(5 * angle) * 0.3 + 0.4
            petal_tolerance = 0.08
            return abs(distance - petal_function) < petal_tolerance
        elif pattern == 'concentric_rings':
            ring_width = 0.15
            ring_number = int(distance / ring_width)
            return ring_number % 2 == 1
            
        return False
    
    # Funci√≥n para asignar textura a cada tri√°ngulo individual
    def asignar_textura_triangulo(triangle, texturas_disponibles, accent_pattern):
        """Asigna una textura espec√≠fica a cada tri√°ngulo basada en reglas"""
        shape, v1, v2, v3 = triangle
        
        # Verificar si debe usar textura de acento
        if should_use_accent_texture(triangle, accent_pattern) and len(texturas_disponibles) > 2:
            # Usar la tercera textura como acento
            return texturas_disponibles[2]
        
        # Asignaci√≥n b√°sica por tipo de tri√°ngulo
        if shape == "thin":
            return texturas_disponibles[0] if len(texturas_disponibles) > 0 else None
        else:  # thick
            return texturas_disponibles[1] if len(texturas_disponibles) > 1 else texturas_disponibles[0]
    
    # Generar tri√°ngulos
    triangles = generate_penrose_rhombi(divisions)
    
    # Renderizar cada tri√°ngulo individualmente con su textura
    triangulos_renderizados = 0
    errores_renderizado = 0
    
    for triangle in triangles:
        shape, v1, v2, v3 = triangle
        vertices = [v1, v2, v3]
        
        # Crear path del tri√°ngulo
        ctx.move_to(v1.real, v1.imag)
        ctx.line_to(v2.real, v2.imag)
        ctx.line_to(v3.real, v3.imag)
        ctx.close_path()
        
        # Asignar textura espec√≠fica para este tri√°ngulo
        textura_nombre = asignar_textura_triangulo(triangle, texturas_disponibles, accent_pattern)
        textura_info = _texturas_dict.get(textura_nombre) if textura_nombre else None
        
        # Aplicar textura individual
        if textura_info:
            if aplicar_textura_a_triangulo_individual(ctx, vertices, textura_info, escala_textura):
                ctx.fill_preserve()
                triangulos_renderizados += 1
            else:
                # Fallback a color s√≥lido si falla la textura
                if shape == "thin":
                    ctx.set_source_rgb(0.3, 0.7, 0.9)
                else:
                    ctx.set_source_rgb(0.1, 0.4, 0.8)
                ctx.fill_preserve()
                errores_renderizado += 1
        else:
            # Fallback a color s√≥lido si no hay textura
            if shape == "thin":
                ctx.set_source_rgb(0.3, 0.7, 0.9)
            else:
                ctx.set_source_rgb(0.1, 0.4, 0.8)
            ctx.fill_preserve()
            errores_renderizado += 1
        
        # Contorno si se solicita
        if line_width > 0:
            ctx.set_line_width(line_width)
            ctx.set_source_rgb(0.0, 0.0, 0.0)
            ctx.stroke()
        else:
            ctx.new_path()
    
    # Convertir a imagen PIL
    buf = surface.get_data()
    a = np.ndarray(shape=(r2, r1, 4), dtype=np.uint8, buffer=buf)
    a = a[:, :, [2, 1, 0, 3]]  # BGRA -> RGBA
    
    # Convertir a PIL Image
    img = Image.fromarray(a)
    
    # Estad√≠sticas
    thin_count = sum(1 for t in triangles if t[0] == 'thin')
    thick_count = len(triangles) - thin_count
    
    return img, {
        'total_pieces': len(triangles),
        'thin_pieces': thin_count,
        'thick_pieces': thick_count,
        'paleta': paleta_nombre,
        'texturas_usadas': texturas_disponibles,
        'accent_pattern': accent_pattern,
        'escala_textura': escala_textura,
        'resolucion': resolution,  # Solo (ancho, alto)
        'triangulos_con_textura': triangulos_renderizados,
        'errores_renderizado': errores_renderizado,
        'dpi_estimado': resolution[0] / 8,  # Para tri√°ngulos de 8cm
        'tama√±o_impresion_cm': (resolution[0] / 118, resolution[1] / 118)  # A 300 DPI
    }

def crear_vista_previa_paleta(paleta_nombre, texturas_dict):
    """Crea una vista previa de la paleta seleccionada"""
    if paleta_nombre not in PALETAS_TEXTURAS:
        return None
    
    paleta_info = PALETAS_TEXTURAS[paleta_nombre]
    texturas_paleta = paleta_info['texturas']
    
    # Crear imagen de vista previa
    preview_width = 300
    preview_height = 80
    preview_img = Image.new('RGB', (preview_width, preview_height), 'white')
    
    segment_width = preview_width // len(texturas_paleta)
    
    for i, tex_nombre in enumerate(texturas_paleta):
        if tex_nombre in texturas_dict:
            texture = texturas_dict[tex_nombre]['pil']
            texture_resized = texture.resize((segment_width, preview_height), Image.Resampling.LANCZOS)
            
            # Pegar segmento
            x_pos = i * segment_width
            preview_img.paste(texture_resized, (x_pos, 0))
    
    return preview_img

def generar_mural_rectangular_penrose(ancho_cm, alto_cm, paleta_nombre, accent_pattern, lado_triangulo_cm, _texturas_dict):
    """
    Genera un mural rectangular con teselaci√≥n Penrose usando patrones simples
    Para visualizaci√≥n arquitect√≥nica y c√°lculo de materiales
    """
    
    if paleta_nombre not in PALETAS_TEXTURAS:
        return None, {}
    
    paleta_info = PALETAS_TEXTURAS[paleta_nombre]
    texturas_paleta = paleta_info['texturas']
    
    # Verificar texturas disponibles
    texturas_disponibles = [tex for tex in texturas_paleta if tex in _texturas_dict]
    
    if not texturas_disponibles:
        return None, {}
    
    # Calcular resoluci√≥n para buena calidad (150 DPI para visualizaci√≥n)
    dpi = 150
    px_ancho = int(ancho_cm * dpi / 2.54)
    px_alto = int(alto_cm * dpi / 2.54)
    
    # Crear surface
    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, px_ancho, px_alto)
    ctx = cairo.Context(surface)
    
    # Fondo blanco limpio
    ctx.set_source_rgb(1.0, 1.0, 1.0)
    ctx.paint()
    
    # Configurar escalas para que un tri√°ngulo de 8cm se vea correcto
    escala_cairo = dpi / 2.54  # conversi√≥n cm a p√≠xeles
    ctx.scale(escala_cairo, escala_cairo)
    
    # Centrar el origen en el centro del rect√°ngulo
    ctx.translate(ancho_cm / 2, alto_cm / 2)
    
    # Generar teselaci√≥n Penrose extendida
    phi = (5 ** 0.5 + 1) / 2
    
    def generate_extended_penrose_rhombi(divisions):
        """Genera teselaci√≥n Penrose extendida para llenar rect√°ngulo"""
        base = 5
        triangles = []
        
        # Generar m√∫ltiples centros para cubrir el √°rea rectangular
        centros_x = range(-2, 3)  # M√∫ltiples centros horizontales
        centros_y = range(-1, 2)  # M√∫ltiples centros verticales
        
        for cx in centros_x:
            for cy in centros_y:
                for i in range(base * 2):
                    v2 = cmath.rect(1, (2*i - 1) * math.pi / (base * 2))
                    v3 = cmath.rect(1, (2*i + 1) * math.pi / (base * 2))
                    
                    if i % 2 == 0:
                        v2, v3 = v3, v2
                    
                    # Desplazar por el centro actual
                    offset = complex(cx * 15, cy * 15)  # Separaci√≥n entre centros
                    triangles.append(("thin", offset, v2 + offset, v3 + offset))
        
        # Aplicar divisiones
        for iteration in range(divisions):
            new_triangles = []
            
            for shape, v1, v2, v3 in triangles:
                if shape == "thin":
                    p1 = v1 + (v2 - v1) / phi
                    new_triangles.append(("thin", v3, p1, v2))
                    new_triangles.append(("thick", p1, v3, v1))
                else:
                    p2 = v2 + (v1 - v2) / phi
                    p3 = v2 + (v3 - v2) / phi
                    new_triangles.append(("thick", p3, v3, v1))
                    new_triangles.append(("thick", p2, p3, v2))
                    new_triangles.append(("thin", p3, p2, v1))
            
            triangles = new_triangles
        
        return triangles
    
    def should_use_accent_pattern_rectangular(triangle, pattern, ancho_cm, alto_cm):
        """Determina si usar patr√≥n de acento centrado en el rect√°ngulo"""
        if pattern is None or pattern == 'Ninguno':
            return False
            
        shape, v1, v2, v3 = triangle
        center = (v1 + v2 + v3) / 3
        
        # Convertir a coordenadas del rect√°ngulo (centro = 0,0)
        x_rel = center.real / (ancho_cm / 2)  # Normalizar a [-1, 1]
        y_rel = center.imag / (alto_cm / 2)   # Normalizar a [-1, 1]
        distance_from_center = math.sqrt(x_rel**2 + y_rel**2)
        
        if pattern == 'center_star':
            return distance_from_center < 0.3
        elif pattern == 'outer_ring':
            return distance_from_center > 0.6 and distance_from_center < 0.8
        elif pattern == 'radial_bands':
            angle = cmath.phase(center) % (2 * math.pi)
            band_angle = angle * 6 / (2 * math.pi)
            return int(band_angle) % 2 == 0 and distance_from_center < 0.7
        
        return False
    
    def esta_dentro_rectangulo(triangle, ancho_cm, alto_cm):
        """Verifica si el tri√°ngulo est√° dentro del rect√°ngulo"""
        shape, v1, v2, v3 = triangle
        vertices = [v1, v2, v3]
        
        for v in vertices:
            x, y = v.real, v.imag
            if (abs(x) <= ancho_cm / 2 and abs(y) <= alto_cm / 2):
                return True
        
        return False
    
    def recortar_triangulo_a_rectangulo(triangle, ancho_cm, alto_cm):
        """Recorta tri√°ngulo a los l√≠mites del rect√°ngulo"""
        shape, v1, v2, v3 = triangle
        vertices = [v1, v2, v3]
        
        # Verificar qu√© v√©rtices est√°n dentro
        vertices_dentro = []
        for v in vertices:
            x, y = v.real, v.imag
            if (abs(x) <= ancho_cm / 2 and abs(y) <= alto_cm / 2):
                vertices_dentro.append(v)
        
        # Si al menos un v√©rtice est√° dentro, incluir el tri√°ngulo
        if len(vertices_dentro) >= 1:
            return (shape, v1, v2, v3)
        
        return None
    
    def get_pattern_style(texture_name, triangle_type):
        """Define estilos de patr√≥n simple para cada textura"""
        patterns = {
            'azul': ('solid', (0.2, 0.4, 0.8)),
            'verde': ('dots', (0.2, 0.6, 0.3)),
            'rosa': ('lines_h', (0.9, 0.3, 0.5)),
            'amarillo': ('solid', (0.9, 0.8, 0.2)),
            'naranja': ('lines_v', (1.0, 0.5, 0.1)),
            'gris 1': ('dots', (0.5, 0.5, 0.5)),
            'gris2': ('solid', (0.3, 0.3, 0.3)),
            'blanco1': ('solid', (0.95, 0.95, 0.95)),
            'blanco2': ('dots', (0.9, 0.9, 0.9)),
            'blanco 3': ('lines_h', (0.85, 0.85, 0.85)),
            'blanco 4': ('lines_v', (0.8, 0.8, 0.8)),
            'PERU': ('lines_d', (0.8, 0.6, 0.4))
        }
        
        return patterns.get(texture_name, ('solid', (0.7, 0.7, 0.7)))
    
    def draw_pattern_in_triangle(ctx, vertices, pattern_style, color):
        """Dibuja patr√≥n simple dentro del tri√°ngulo"""
        style, rgb = pattern_style, color
        
        # Crear path del tri√°ngulo
        ctx.move_to(vertices[0].real, vertices[0].imag)
        ctx.line_to(vertices[1].real, vertices[1].imag)
        ctx.line_to(vertices[2].real, vertices[2].imag)
        ctx.close_path()
        
        if style == 'solid':
            ctx.set_source_rgb(*rgb)
            ctx.fill_preserve()
        
        elif style == 'dots':
            # Fondo s√≥lido m√°s claro
            ctx.set_source_rgb(rgb[0] + 0.3, rgb[1] + 0.3, rgb[2] + 0.3)
            ctx.fill_preserve()
            
            # Clip al tri√°ngulo para los puntos
            ctx.clip_preserve()
            
            # Dibujar puntos
            xs = [v.real for v in vertices]
            ys = [v.imag for v in vertices]
            min_x, max_x = min(xs), max(xs)
            min_y, max_y = min(ys), max(ys)
            
            ctx.set_source_rgb(*rgb)
            spacing = 0.5  # Espaciado entre puntos en cm
            
            x = min_x
            while x <= max_x:
                y = min_y
                while y <= max_y:
                    ctx.arc(x, y, 0.1, 0, 2 * math.pi)
                    ctx.fill()
                    y += spacing
                x += spacing
            
            ctx.reset_clip()
        
        elif style == 'lines_h':
            # Fondo s√≥lido m√°s claro
            ctx.set_source_rgb(rgb[0] + 0.2, rgb[1] + 0.2, rgb[2] + 0.2)
            ctx.fill_preserve()
            
            # Clip al tri√°ngulo
            ctx.clip_preserve()
            
            # L√≠neas horizontales
            ys = [v.imag for v in vertices]
            min_y, max_y = min(ys), max(ys)
            
            ctx.set_source_rgb(*rgb)
            ctx.set_line_width(0.1)
            spacing = 0.4
            
            y = min_y
            while y <= max_y:
                ctx.move_to(-ancho_cm, y)
                ctx.line_to(ancho_cm, y)
                ctx.stroke()
                y += spacing
            
            ctx.reset_clip()
        
        elif style == 'lines_v':
            # Fondo s√≥lido m√°s claro
            ctx.set_source_rgb(rgb[0] + 0.2, rgb[1] + 0.2, rgb[2] + 0.2)
            ctx.fill_preserve()
            
            # Clip al tri√°ngulo
            ctx.clip_preserve()
            
            # L√≠neas verticales
            xs = [v.real for v in vertices]
            min_x, max_x = min(xs), max(xs)
            
            ctx.set_source_rgb(*rgb)
            ctx.set_line_width(0.1)
            spacing = 0.4
            
            x = min_x
            while x <= max_x:
                ctx.move_to(x, -alto_cm)
                ctx.line_to(x, alto_cm)
                ctx.stroke()
                x += spacing
            
            ctx.reset_clip()
        
        elif style == 'lines_d':
            # Fondo s√≥lido m√°s claro
            ctx.set_source_rgb(rgb[0] + 0.2, rgb[1] + 0.2, rgb[2] + 0.2)
            ctx.fill_preserve()
            
            # Clip al tri√°ngulo
            ctx.clip_preserve()
            
            # L√≠neas diagonales
            ctx.set_source_rgb(*rgb)
            ctx.set_line_width(0.1)
            spacing = 0.4
            
            for i in range(-50, 51):
                y_start = i * spacing
                ctx.move_to(-ancho_cm, y_start - ancho_cm)
                ctx.line_to(ancho_cm, y_start + ancho_cm)
                ctx.stroke()
            
            ctx.reset_clip()
    
    # Generar tri√°ngulos
    triangles = generate_extended_penrose_rhombi(6)  # Divisiones fijas para buena densidad
    
    # Filtrar tri√°ngulos que est√°n dentro o intersectan el rect√°ngulo
    triangles_filtrados = []
    for triangle in triangles:
        if esta_dentro_rectangulo(triangle, ancho_cm, alto_cm):
            triangle_recortado = recortar_triangulo_a_rectangulo(triangle, ancho_cm, alto_cm)
            if triangle_recortado:
                triangles_filtrados.append(triangle_recortado)
    
    # Contadores para materiales
    contadores = {
        'thin': {},
        'thick': {},
        'accent': {}
    }
    
    for tex_name in texturas_disponibles:
        contadores['thin'][tex_name] = 0
        contadores['thick'][tex_name] = 0
        contadores['accent'][tex_name] = 0
    
    # Renderizar tri√°ngulos
    for triangle in triangles_filtrados:
        shape, v1, v2, v3 = triangle
        vertices = [v1, v2, v3]
        
        # Determinar textura y tipo
        if should_use_accent_pattern_rectangular(triangle, accent_pattern, ancho_cm, alto_cm):
            texture_name = texturas_disponibles[2] if len(texturas_disponibles) > 2 else texturas_disponibles[0]
            contadores['accent'][texture_name] += 1
        elif shape == "thin":
            texture_name = texturas_disponibles[0] if len(texturas_disponibles) > 0 else None
            contadores['thin'][texture_name] += 1
        else:  # thick
            texture_name = texturas_disponibles[1] if len(texturas_disponibles) > 1 else texturas_disponibles[0]
            contadores['thick'][texture_name] += 1
        
        # Obtener estilo de patr√≥n
        pattern_style = get_pattern_style(texture_name, shape)
        
        # Dibujar tri√°ngulo con patr√≥n
        draw_pattern_in_triangle(ctx, vertices, pattern_style, pattern_style[1])
        
        # Contorno negro
        ctx.move_to(v1.real, v1.imag)
        ctx.line_to(v2.real, v2.imag)
        ctx.line_to(v3.real, v3.imag)
        ctx.close_path()
        ctx.set_source_rgb(0.0, 0.0, 0.0)
        ctx.set_line_width(0.05)
        ctx.stroke()
    
    # Dibujar borde del rect√°ngulo
    ctx.rectangle(-ancho_cm/2, -alto_cm/2, ancho_cm, alto_cm)
    ctx.set_source_rgb(0.0, 0.0, 0.0)
    ctx.set_line_width(0.2)
    ctx.stroke()
    
    # Convertir a imagen PIL
    buf = surface.get_data()
    a = np.ndarray(shape=(px_alto, px_ancho, 4), dtype=np.uint8, buffer=buf)
    a = a[:, :, [2, 1, 0, 3]]  # BGRA -> RGBA
    
    img = Image.fromarray(a)
    
    # Calcular totales
    total_triangulos = sum(sum(categoria.values()) for categoria in contadores.values())
    
    return img, {
        'dimensiones_cm': (ancho_cm, alto_cm),
        'dimensiones_px': (px_ancho, px_alto),
        'total_triangulos': total_triangulos,
        'contadores': contadores,
        'paleta': paleta_nombre,
        'texturas_usadas': texturas_disponibles,
        'accent_pattern': accent_pattern,
        'lado_triangulo_cm': lado_triangulo_cm,
        'dpi': dpi
    }
    """Crea una vista previa de la paleta seleccionada"""
    if paleta_nombre not in PALETAS_TEXTURAS:
        return None
    
    paleta_info = PALETAS_TEXTURAS[paleta_nombre]
    texturas_paleta = paleta_info['texturas']
    
    # Crear imagen de vista previa
    preview_width = 300
    preview_height = 80
    preview_img = Image.new('RGB', (preview_width, preview_height), 'white')
    
    segment_width = preview_width // len(texturas_paleta)
    
    for i, tex_nombre in enumerate(texturas_paleta):
        if tex_nombre in texturas_dict:
            texture = texturas_dict[tex_nombre]['pil']
            texture_resized = texture.resize((segment_width, preview_height), Image.Resampling.LANCZOS)
            
            # Pegar segmento
            x_pos = i * segment_width
            preview_img.paste(texture_resized, (x_pos, 0))
    
    return preview_img

def create_download_link(img, filename):
    """Crea un link de descarga para la imagen"""
    buffer = io.BytesIO()
    img.save(buffer, format='PNG')
    buffer.seek(0)
    
    b64 = base64.b64encode(buffer.read()).decode()
    href = f'<a href="data:image/png;base64,{b64}" download="{filename}">üì• Descargar {filename}</a>'
    return href

def main():
    # PARCHE DE SEGURIDAD GLOBAL - Evitar KeyError area_m2
    def patch_stats_seguro(stats_dict):
        """Asegura que stats tenga todas las claves necesarias"""
        if isinstance(stats_dict, dict):
            if 'area_m2' not in stats_dict and 'dimensiones_cm' in stats_dict:
                ancho, alto = stats_dict['dimensiones_cm']
                stats_dict['area_m2'] = (ancho * alto) / 10000
            if 'dpi' not in stats_dict:
                stats_dict['dpi'] = 'Auto'
        return stats_dict
    
    # Aplicar parche a todos los stats en session_state
    for key in st.session_state:
        if 'stats' in key and isinstance(st.session_state[key], dict):
            st.session_state[key] = patch_stats_seguro(st.session_state[key])
    
    # Header principal
    st.markdown("""
        <div class="main-header">
            <h1>üé® Generador de Mosaicos Penrose con Texturas</h1>
            <p>Crea hermosos azulejos geom√©tricos usando patrones de texturas basados en teor√≠a del color</p>
        </div>
    """, unsafe_allow_html=True)
    
    # Cargar texturas
    with st.spinner('üîÑ Cargando texturas...'):
        texturas_dict, texturas_encontradas, texturas_faltantes = cargar_texturas_streamlit()
    
    # Mostrar estado de carga de texturas
    if texturas_encontradas:
        st.success(f"‚úÖ Texturas cargadas: {len(texturas_encontradas)}")
        with st.expander("Ver texturas disponibles"):
            cols = st.columns(4)
            for i, tex_nombre in enumerate(texturas_encontradas[:8]):  # Mostrar m√°ximo 8
                with cols[i % 4]:
                    nombre_limpio = tex_nombre.replace('.png', '')
                    if nombre_limpio in texturas_dict:
                        st.image(texturas_dict[nombre_limpio]['pil'], caption=nombre_limpio, width=100)
    
    if texturas_faltantes:
        st.warning(f"‚ö†Ô∏è Texturas no encontradas: {len(texturas_faltantes)}")
        with st.expander("Ver texturas faltantes"):
            for tex in texturas_faltantes:
                st.text(f"‚Ä¢ {tex}")
    
    # Sidebar con informaci√≥n de paletas
    st.sidebar.markdown("## üé® Paletas de Color Disponibles")
    
    for nombre, info in PALETAS_TEXTURAS.items():
        with st.sidebar.expander(f"{info['descripcion']}"):
            st.write(f"**Teor√≠a:** {info['teoria']}")
            st.write(f"**Texturas:** {', '.join(info['texturas'])}")
            
            # Verificar disponibilidad
            disponibles = [tex for tex in info['texturas'] if tex in texturas_dict]
            if disponibles:
                st.success(f"‚úÖ {len(disponibles)}/{len(info['texturas'])} disponibles")
            else:
                st.error("‚ùå No hay texturas disponibles")
    
    # Pesta√±as principales
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üé® Generador con Texturas", "üèóÔ∏è Configuraci√≥n Murales", "üìê Mural Rectangular", "üî¨ An√°lisis de Paletas", "üìö Galer√≠a de Patrones"])
    
    with tab1:
        st.markdown("### üéØ Generaci√≥n con Texturas")
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.markdown("#### üé® Configuraci√≥n")
            
            # Selecci√≥n de paleta
            paleta_seleccionada = st.selectbox(
                "üåà Paleta de Texturas:",
                list(PALETAS_TEXTURAS.keys()),
                help="Selecciona una paleta basada en teor√≠a del color"
            )
            
            # Vista previa de paleta
            if paleta_seleccionada:
                preview_img = crear_vista_previa_paleta(paleta_seleccionada, texturas_dict)
                if preview_img:
                    st.image(preview_img, caption=f"Vista previa: {paleta_seleccionada}", use_container_width=True)
                
                # Informaci√≥n de la paleta
                paleta_info = PALETAS_TEXTURAS[paleta_seleccionada]
                st.markdown(f"""
                    <div class="texture-info">
                        <strong>{paleta_info['descripcion']}</strong><br>
                        <em>{paleta_info['teoria']}</em>
                    </div>
                """, unsafe_allow_html=True)
            
            accent_pattern = st.selectbox(
                "‚ú® Patr√≥n de Acento:",
                ['Ninguno', 'center_star', 'outer_ring', 'radial_bands', 'spiral_arms', 
                 'diamond_cross', 'petal_flower', 'concentric_rings'],
                help="Agrega elementos especiales al dise√±o"
            )
            
            divisions = st.slider(
                "üî¢ Subdivisiones:",
                min_value=4, max_value=7, value=6,
                help="M√°s divisiones = m√°s detalle (pero tarda m√°s)"
            )
            
            line_width = st.slider(
                "üñäÔ∏è Grosor de L√≠neas:",
                min_value=0.0, max_value=0.01, value=0.002, step=0.001,
                format="%.3f",
                help="0.0 = sin l√≠neas, 0.01 = l√≠neas gruesas"
            )
            
            resolution = st.selectbox(
                "üìê Resoluci√≥n:",
                [
                    (800, 800, "Vista previa"),
                    (1600, 1600, "Alta calidad"),
                    (2400, 2400, "Impresi√≥n b√°sica"),
                    (3600, 3600, "Impresi√≥n profesional"),
                    (4800, 4800, "Mural peque√±o"),
                    (7200, 7200, "Mural grande")
                ],
                index=2,
                format_func=lambda x: f"{x[0]}x{x[1]} px - {x[2]}"
            )
            
            # Control de escala de textura para murales
            escala_textura = st.slider(
                "üîç Detalle de Textura por Tri√°ngulo:",
                min_value=1.0, max_value=4.0, value=2.5, step=0.1,
                help="Controla cu√°nto detalle de textura se ve en cada tri√°ngulo individual. M√°s alto = m√°s detalle visible por pieza."
            )
            
            # Informaci√≥n espec√≠fica para murales
            st.markdown("""
                <div class="texture-info">
                    <strong>üí° Nuevo Sistema de Texturas:</strong><br>
                    ‚Ä¢ Cada tri√°ngulo tiene su propia textura individual<br>
                    ‚Ä¢ No hay continuidad entre piezas (como mosaico real)<br>
                    ‚Ä¢ Cada pieza es independiente para corte e impresi√≥n<br>
                    ‚Ä¢ Escala 2.0+ para texturas bien visibles en tri√°ngulos de 8cm
                </div>
            """, unsafe_allow_html=True)
            
            generate_btn = st.button("üé® Generar Mosaico con Texturas", type="primary")
        
        with col2:
            if generate_btn and texturas_dict:
                with st.spinner('üîÑ Generando mosaico con texturas...'):
                    accent = accent_pattern if accent_pattern != 'Ninguno' else None
                    # Extraer informaci√≥n completa de la resoluci√≥n
                    res_dims = (resolution[0], resolution[1])
                    res_tipo = resolution[2]
                    img, stats = generate_penrose_tiles_with_textures(
                        divisions, res_dims, paleta_seleccionada, accent, line_width, escala_textura, texturas_dict
                    )
                    
                    # Agregar informaci√≥n del tipo de resoluci√≥n al stats
                    stats['tipo_resolucion'] = res_tipo
                    
                    if img:
                        st.markdown("#### üñºÔ∏è Mosaico Generado")
                        
                        # Controles de visualizaci√≥n
                        col_view1, col_view2 = st.columns(2)
                        with col_view1:
                            zoom_level = st.selectbox(
                                "üîç Nivel de Zoom:",
                                [("100%", 1.0), ("150%", 1.5), ("200%", 2.0), ("300%", 3.0)],
                                format_func=lambda x: x[0]
                            )
                        with col_view2:
                            mostrar_info_resolucion = st.checkbox("üìä Mostrar info de resoluci√≥n", value=True)
                        
                        # Calcular tama√±o de visualizaci√≥n
                        display_width = int(800 * zoom_level[1])  # Ancho base escalado
                        
                        # Mostrar imagen con zoom
                        st.image(img, 
                                caption=f"Mosaico Penrose - Paleta {paleta_seleccionada} | Resoluci√≥n: {resolution[0]}x{resolution[1]} | Escala: {escala_textura}x", 
                                width=display_width)
                        
                        # Informaci√≥n adicional de resoluci√≥n
                        if mostrar_info_resolucion:
                            st.info(f"""
                            **Informaci√≥n de Resoluci√≥n:**
                            ‚Ä¢ Imagen generada: {resolution[0]} x {resolution[1]} p√≠xeles
                            ‚Ä¢ Tipo: {stats.get('tipo_resolucion', 'Personalizada')}
                            ‚Ä¢ Detalle por tri√°ngulo: {escala_textura}x
                            ‚Ä¢ Cada tri√°ngulo: pieza independiente con textura completa
                            ‚Ä¢ Para tri√°ngulos de 8cm: {resolution[0]/90:.1f} x {resolution[1]/90:.1f} cm a 300 DPI
                            """)
                        
                        # Bot√≥n para generar vista de detalle
                        if st.button("üîç Generar Vista de Detalle (Zoom Regi√≥n Central)"):
                            with st.spinner('Generando vista de detalle...'):
                                # Crear una versi√≥n recortada del centro para mostrar detalle
                                center_crop = img.crop((
                                    resolution[0]//4, resolution[1]//4,
                                    3*resolution[0]//4, 3*resolution[1]//4
                                ))
                                st.image(center_crop, 
                                        caption="Vista de detalle - Regi√≥n central", 
                                        use_container_width=True)
                                
                                # An√°lisis de la textura en detalle
                                st.write("**üî¨ En esta vista puedes ver:**")
                                st.write("‚Ä¢ Cada tri√°ngulo tiene su textura independiente")
                                st.write("‚Ä¢ Los bordes definen cada pieza del mosaico") 
                                st.write("‚Ä¢ La calidad de textura dentro de cada tri√°ngulo")
                                st.write("‚Ä¢ C√≥mo se ver√° cada pieza al cortarla individualmente")
                        
                        # Estad√≠sticas mejoradas
                        st.markdown("#### üìä Estad√≠sticas del Mosaico")
                        col_stats1, col_stats2, col_stats3, col_stats4 = st.columns(4)
                        
                        with col_stats1:
                            st.metric("Total Piezas", stats['total_pieces'])
                        with col_stats2:
                            st.metric("Tri√°ngulos Delgados", stats['thin_pieces'])
                        with col_stats3:
                            st.metric("Tri√°ngulos Gruesos", stats['thick_pieces'])
                        with col_stats4:
                            texturizados = stats.get('triangulos_con_textura', 0)
                            porcentaje = (texturizados / stats['total_pieces'] * 100) if stats['total_pieces'] > 0 else 0
                            st.metric("Con Textura", f"{texturizados} ({porcentaje:.1f}%)")
                        
                        # Alerta de calidad si hay errores
                        errores = stats.get('errores_renderizado', 0)
                        if errores > 0:
                            st.warning(f"‚ö†Ô∏è {errores} tri√°ngulos usaron color s√≥lido por problemas de textura")
                        else:
                            st.success("‚úÖ Todas las texturas se aplicaron correctamente")
                        
                        # Informaci√≥n espec√≠fica para murales
                        st.markdown("#### üèóÔ∏è Informaci√≥n para Mural")
                        col_mural1, col_mural2 = st.columns(2)
                        
                        with col_mural1:
                            tama√±o_impresion = stats['tama√±o_impresion_cm']
                            st.write(f"**Tama√±o de impresi√≥n (300 DPI):**")
                            st.write(f"{tama√±o_impresion[0]:.1f} x {tama√±o_impresion[1]:.1f} cm")
                            st.write(f"**Tri√°ngulos independientes:** {stats['total_pieces']} piezas")
                            st.write(f"**Cada pieza:** 8cm con textura completa")
                        
                        with col_mural2:
                            st.write(f"**Resoluci√≥n:** {stats['resolucion'][0]} x {stats['resolucion'][1]} px")
                            st.write(f"**Tipo:** {stats.get('tipo_resolucion', 'Personalizada')}")
                            st.write(f"**DPI recomendado:** 300 DPI para impresi√≥n")
                        
                        # Informaci√≥n de texturas usadas
                        st.markdown("#### üé® Texturas Aplicadas")
                        st.write(f"**Paleta:** {stats['paleta']}")
                        st.write(f"**Texturas usadas:** {', '.join(stats['texturas_usadas'])}")
                        
                        # Bot√≥n de descarga
                        filename = f"penrose_texturas_{paleta_seleccionada}_{accent_pattern}_{divisions}div_{resolution[0]}x{resolution[1]}.png"
                        download_link = create_download_link(img, filename)
                        st.markdown(download_link, unsafe_allow_html=True)
                        
                        # Guardar en session state
                        st.session_state['last_texture_image'] = img
                        st.session_state['last_texture_stats'] = stats
                        st.session_state['last_texture_filename'] = filename
            
            elif 'last_texture_image' in st.session_state:
                st.markdown("#### üñºÔ∏è √öltimo Mosaico Generado")
                st.image(st.session_state['last_texture_image'], use_container_width=True)
                
                if 'last_texture_stats' in st.session_state:
                    stats = st.session_state['last_texture_stats']
                    col_stats1, col_stats2, col_stats3 = st.columns(3)
                    
                    with col_stats1:
                        st.metric("Total Piezas", stats['total_pieces'])
                    with col_stats2:
                        st.metric("Tri√°ngulos Delgados", stats['thin_pieces'])
                    with col_stats3:
                        st.metric("Tri√°ngulos Gruesos", stats['thick_pieces'])
                
                if 'last_texture_filename' in st.session_state:
                    download_link = create_download_link(
                        st.session_state['last_texture_image'], 
                        st.session_state['last_texture_filename']
                    )
                    st.markdown(download_link, unsafe_allow_html=True)
            
            elif not texturas_dict:
                st.error("‚ùå No hay texturas disponibles. Aseg√∫rate de que los archivos PNG est√©n en el directorio.")
    
    with tab2:
        st.markdown("### üèóÔ∏è Configuraci√≥n Especializada para Murales")
        
        if texturas_dict:
            st.markdown("""
                <div class="texture-info">
                    <h4>üéØ Gu√≠a para Murales de Tri√°ngulos de 8cm</h4>
                    <p>Esta secci√≥n te ayuda a configurar el mosaico perfecto para impresi√≥n en gran formato.</p>
                </div>
            """, unsafe_allow_html=True)
            
            # Calculadora de tama√±o de mural
            st.markdown("#### üìê Calculadora de Tama√±o de Mural")
            
            col_calc1, col_calc2 = st.columns(2)
            
            with col_calc1:
                ancho_mural_cm = st.number_input(
                    "Ancho del mural (cm):",
                    min_value=50, max_value=500, value=120, step=10
                )
                
                alto_mural_cm = st.number_input(
                    "Alto del mural (cm):",
                    min_value=50, max_value=500, value=120, step=10
                )
                
                dpi_impresion = st.selectbox(
                    "Calidad de impresi√≥n:",
                    [(150, "Borrador r√°pido"), (300, "Calidad est√°ndar"), (600, "Alta calidad")],
                    index=1,
                    format_func=lambda x: f"{x[0]} DPI - {x[1]}"
                )
            
            with col_calc2:
                # Calcular resoluci√≥n recomendada
                px_ancho = int(ancho_mural_cm * dpi_impresion[0] / 2.54)
                px_alto = int(alto_mural_cm * dpi_impresion[0] / 2.54)
                
                st.markdown(f"""
                    **üìä Resoluci√≥n Recomendada:**
                    - **{px_ancho} x {px_alto} p√≠xeles**
                    - Tama√±o de archivo estimado: {(px_ancho * px_alto * 3 / 1024 / 1024):.1f} MB
                    - Tri√°ngulos de 8cm cada uno
                    - Aproximadamente {int((ancho_mural_cm * alto_mural_cm) / 64)} tri√°ngulos
                """)
                
                # Escala de textura recomendada
                triangulos_por_textura = max(1, int(px_ancho / 800))  # Estimaci√≥n
                escala_recomendada = max(1.0, min(5.0, triangulos_por_textura * 0.5))
                
                st.markdown(f"""
                    **üîç Configuraci√≥n Recomendada:**
                    - Escala de textura: **{escala_recomendada:.1f}x**
                    - Subdivisiones: **6-7** (para buena definici√≥n)
                    - Grosor de l√≠neas: **0.001-0.003**
                """)
            
            # Generador espec√≠fico para murales
            st.markdown("#### üé® Generador Optimizado para Murales")
            
            col_mural1, col_mural2 = st.columns([1, 2])
            
            with col_mural1:
                mural_paleta = st.selectbox(
                    "üåà Paleta para Mural:",
                    list(PALETAS_TEXTURAS.keys()),
                    help="Paletas optimizadas para gran formato"
                )
                
                usar_resolucion_calculada = st.checkbox(
                    "Usar resoluci√≥n calculada",
                    value=True,
                    help="Usa la resoluci√≥n calculada arriba"
                )
                
                if not usar_resolucion_calculada:
                    mural_resolution = st.selectbox(
                        "Resoluci√≥n personalizada:",
                        [
                            (2400, 2400, "Mural peque√±o"),
                            (3600, 3600, "Mural mediano"),
                            (4800, 4800, "Mural grande"),
                            (7200, 7200, "Mural extra grande")
                        ],
                        format_func=lambda x: f"{x[0]}x{x[1]} - {x[2]}"
                    )
                else:
                    mural_resolution = (px_ancho, px_alto, "Calculado")
                
                mural_escala = st.slider(
                    "üîç Escala de textura:",
                    min_value=1.0, max_value=5.0, 
                    value=escala_recomendada, step=0.1
                )
                
                mural_divisions = st.slider(
                    "üî¢ Subdivisiones:",
                    min_value=5, max_value=8, value=6
                )
                
                if st.button("üèóÔ∏è Generar Mural", type="primary"):
                    if mural_resolution[0] > 5000 or mural_resolution[1] > 5000:
                        st.warning("‚ö†Ô∏è Resoluci√≥n muy alta. La generaci√≥n puede tardar varios minutos.")
                    
                    with st.spinner('üîÑ Generando mural de alta resoluci√≥n...'):
                        try:
                            res_dims = (mural_resolution[0], mural_resolution[1])
                            img_mural, stats_mural = generate_penrose_tiles_with_textures(
                                mural_divisions, res_dims, mural_paleta, None, 0.002, mural_escala, texturas_dict
                            )
                            
                            if img_mural:
                                # Mostrar informaci√≥n de la versi√≥n de alta resoluci√≥n - CORREGIDO COMPLETAMENTE
                                area_hires_segura = calcular_area_segura(stats_mural)
                                dpi_hires_seguro = obtener_dpi_seguro(stats_mural)
                                
                                st.success("‚úÖ Mural generado exitosamente!")
                                st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå Error generando mural: {str(e)}")
                            st.info("üí° Intenta con una resoluci√≥n menor o contacta soporte.")
            
            with col_mural2:
                if 'mural_image' in st.session_state:
                    img_mural = st.session_state['mural_image']
                    stats_mural = st.session_state['mural_stats']
                    
                    st.markdown("#### üñºÔ∏è Mural Generado")
                    
                    # Vista previa redimensionada
                    preview_img = img_mural.copy()
                    preview_img.thumbnail((800, 800), Image.Resampling.LANCZOS)
                    
                    st.image(preview_img, 
                            caption=f"Vista previa del mural - Resoluci√≥n original: {img_mural.size[0]}x{img_mural.size[1]}", 
                            use_container_width=True)
                    
                    # Estad√≠sticas del mural
                    st.markdown("#### üìä Especificaciones del Mural")
                    
                    col_spec1, col_spec2 = st.columns(2)
                    
                    with col_spec1:
                        st.metric("Resoluci√≥n", f"{img_mural.size[0]}x{img_mural.size[1]} px")
                        st.metric("Total Tri√°ngulos", stats_mural['total_pieces'])
                        st.metric("Tama√±o Archivo", f"{(img_mural.size[0] * img_mural.size[1] * 3 / 1024 / 1024):.1f} MB")
                    
                    with col_spec2:
                        area_mural_segura = calcular_area_segura(stats_mural)
                        dpi_mural_seguro = obtener_dpi_seguro(stats_mural)
                        
                        st.metric("Escala Textura", f"{stats_mural.get('escala_textura', 'N/A')}x")
                        st.metric("Tama√±o Impresi√≥n", f"{ancho_mural_cm}x{alto_mural_cm} cm")
                        st.metric("DPI", f"{dpi_impresion[0]} DPI")
                    
                    # Descargas en diferentes formatos
                    st.markdown("#### üì• Descargas Disponibles")
                    
                    # Descarga principal
                    filename_mural = f"mural_penrose_{mural_paleta}_{img_mural.size[0]}x{img_mural.size[1]}.png"
                    download_link_mural = create_download_link(img_mural, filename_mural)
                    st.markdown(download_link_mural, unsafe_allow_html=True)
                    
                    # Vista de detalle adicional
                    if st.button("üîç Generar Vista de Detalle del Mural"):
                        # Recorte del centro para mostrar detalle
                        w, h = img_mural.size
                        detail_crop = img_mural.crop((w//3, h//3, 2*w//3, 2*h//3))
                        
                        st.image(detail_crop, 
                                caption="Vista de detalle - Regi√≥n central del mural", 
                                use_container_width=True)
                        
                        # Informaci√≥n sobre calidad de impresi√≥n
                        st.info("""
                        **üî¨ An√°lisis de Calidad:**
                        ‚Ä¢ En esta vista puedes evaluar la nitidez de las texturas
                        ‚Ä¢ Verifica que los detalles se vean claramente
                        ‚Ä¢ Esta calidad se mantendr√° en la impresi√≥n final
                        """)
                else:
                    st.markdown("""
                        <div class="pattern-preview">
                            <h4>üéØ Configuraci√≥n Lista</h4>
                            <p>Haz clic en "Generar Mural" para crear tu mosaico optimizado</p>
                            <p><strong>Configuraci√≥n actual:</strong></p>
                            <ul>
                                <li>Tama√±o: """ + f"{ancho_mural_cm}x{alto_mural_cm} cm" + """</li>
                                <li>Resoluci√≥n: """ + f"{px_ancho}x{px_alto} px" + """</li>
                                <li>Calidad: """ + f"{dpi_impresion[0]} DPI" + """</li>
                            </ul>
                        </div>
                    """, unsafe_allow_html=True)
        else:
            st.error("‚ùå No hay texturas disponibles para configurar murales")

    with tab5:
        st.markdown("### üî¨ An√°lisis de Paletas de Color")
        
        if texturas_dict:
            # Comparaci√≥n de paletas
            st.markdown("#### üé® Comparaci√≥n de Paletas")
            
            paletas_seleccionadas = st.multiselect(
                "Selecciona paletas para comparar:",
                list(PALETAS_TEXTURAS.keys()),
                default=['Fuego', 'Oc√©ano', 'Contraste']
            )
            
            if paletas_seleccionadas:
                cols = st.columns(len(paletas_seleccionadas))
                
                for i, paleta in enumerate(paletas_seleccionadas):
                    with cols[i]:
                        preview_img = crear_vista_previa_paleta(paleta, texturas_dict)
                        if preview_img:
                            st.image(preview_img, caption=paleta, use_container_width=True)
                        
                        info = PALETAS_TEXTURAS[paleta]
                        st.write(f"**{info['descripcion']}**")
                        st.write(f"*{info['teoria']}*")
                        
                        # Texturas disponibles
                        disponibles = [tex for tex in info['texturas'] if tex in texturas_dict]
                        st.write(f"üìä {len(disponibles)}/{len(info['texturas'])} texturas disponibles")
            
            # An√°lisis individual de texturas
            st.markdown("#### üîç An√°lisis Individual de Texturas")
            
            textura_analizar = st.selectbox(
                "Selecciona textura para analizar:",
                list(texturas_dict.keys())
            )
            
            if textura_analizar:
                col1, col2 = st.columns([1, 1])
                
                with col1:
                    st.image(texturas_dict[textura_analizar]['pil'], caption=textura_analizar, use_container_width=True)
                
                with col2:
                    info = texturas_dict[textura_analizar]
                    st.write(f"**Tama√±o:** {info['size']} p√≠xeles")
                    st.write(f"**Forma del array:** {info['array'].shape}")
                    
                    # Encontrar en qu√© paletas aparece
                    paletas_que_contienen = []
                    for nombre_paleta, paleta_info in PALETAS_TEXTURAS.items():
                        if textura_analizar in paleta_info['texturas']:
                            paletas_que_contienen.append(nombre_paleta)
                    
                    if paletas_que_contienen:
                        st.write(f"**Aparece en paletas:** {', '.join(paletas_que_contienen)}")
                    else:
                        st.write("**No aparece en ninguna paleta definida**")
        else:
            st.error("‚ùå No hay texturas cargadas para analizar")
    
    with tab3:
        st.markdown("### üìê Mural Rectangular - Visualizaci√≥n Arquitect√≥nica")
        
        if texturas_dict:
            st.markdown("""
                <div class="texture-info">
                    <h4>üèóÔ∏è Generador para Murales Rectangulares</h4>
                    <p>Sistema optimizado para visualizaci√≥n arquitect√≥nica y c√°lculo de materiales.</p>
                    <p><strong>Caracter√≠sticas:</strong> Patrones simples, exportable a gran formato, lista de materiales incluida.</p>
                    <p><strong>‚ö†Ô∏è Importante:</strong> El sistema optimiza autom√°ticamente la resoluci√≥n para prevenir archivos excesivos. Para murales grandes use m√∫ltiples resoluciones seg√∫n necesidad.</p>
                </div>
            """, unsafe_allow_html=True)
            
            # Configuraci√≥n del mural rectangular
            st.markdown("#### üìè Dimensiones del Mural")
            
            col_dim1, col_dim2 = st.columns(2)
            
            with col_dim1:
                # Dimensiones predefinidas o personalizadas
                tipo_pared = st.selectbox(
                    "Tipo de pared:",
                    [
                        ("Est√°ndar", 240, 388),  # 2.4m x 3.88m (√°ureo)
                        ("Pared alta", 300, 485),  # 3.0m x 4.85m (√°ureo)
                        ("Pared baja", 200, 324),  # 2.0m x 3.24m (√°ureo)
                        ("Personalizada", 0, 0)
                    ],
                    format_func=lambda x: f"{x[0]} ({x[1]/100:.1f}m x {x[2]/100:.1f}m)" if x[1] > 0 else x[0]
                )
                
                if tipo_pared[0] == "Personalizada":
                    alto_mural = st.number_input(
                        "Alto del mural (cm):",
                        min_value=100, max_value=350, value=240, step=10,
                        help="M√°ximo 350cm para evitar archivos excesivos"
                    )
                    
                    usar_proporcion_aurea = st.checkbox(
                        "Usar proporci√≥n √°urea (1:1.618)",
                        value=True
                    )
                    
                    if usar_proporcion_aurea:
                        ancho_mural = int(alto_mural * 1.61803399)
                        if ancho_mural > 500:
                            st.warning(f"‚ö†Ô∏è Ancho calculado ({ancho_mural}cm) es muy grande. Considera reducir la altura.")
                            ancho_mural = min(500, ancho_mural)
                        st.info(f"Ancho calculado: {ancho_mural} cm")
                    else:
                        ancho_mural = st.number_input(
                            "Ancho del mural (cm):",
                            min_value=100, max_value=500, value=388, step=10,
                            help="M√°ximo 500cm para evitar archivos excesivos"
                        )
                else:
                    alto_mural = tipo_pared[1]
                    ancho_mural = tipo_pared[2]
                
                # Verificaci√≥n de l√≠mites
                area_total = ancho_mural * alto_mural
                if area_total > 150000:  # 15 m¬≤
                    st.error("‚ùå √Årea muy grande (>15m¬≤). Reduce las dimensiones para evitar problemas de memoria.")
                    st.stop()
                elif area_total > 100000:  # 10 m¬≤
                    st.warning("‚ö†Ô∏è √Årea grande (>10m¬≤). La generaci√≥n puede tardar varios minutos.")
                
                lado_triangulo = st.number_input(
                    "Lado mayor del tri√°ngulo (cm):",
                    min_value=5, max_value=15, value=8, step=1,
                    help="Tama√±o de la pieza f√≠sica m√°s grande"
                )
            
            with col_dim2:
                # Informaci√≥n calculada con advertencias de rendimiento
                area_m2 = (ancho_mural * alto_mural) / 10000
                triangulos_estimados = int(area_m2 * 100)  # Estimaci√≥n aproximada
                
                # C√≥digo de color para rendimiento
                if area_m2 > 10:
                    performance_color = "üî¥"
                    performance_text = "Muy lento"
                elif area_m2 > 5:
                    performance_color = "üü°"
                    performance_text = "Lento"
                else:
                    performance_color = "üü¢"
                    performance_text = "R√°pido"
                
                st.markdown(f"""
                    **üìä Informaci√≥n del Mural:**
                    - **Dimensiones:** {ancho_mural} √ó {alto_mural} cm
                    - **√Årea total:** {area_m2:.2f} m¬≤
                    - **Proporci√≥n:** {ancho_mural/alto_mural:.3f} (√°ureo = 1.618)
                    - **Tri√°ngulo base:** {lado_triangulo} cm
                    
                    **üéØ Estimaci√≥n:**
                    - ~{triangulos_estimados} tri√°ngulos
                    - Tiempo colocaci√≥n: ~{int(triangulos_estimados / 50)} horas
                    - Rendimiento: {performance_color} {performance_text}
                """)
                
                if area_m2 > 8:
                    st.info("üí° Para murales grandes, considera usar resoluciones m√°s bajas o dividir en secciones.")
            
            # Configuraci√≥n de dise√±o
            st.markdown("#### üé® Configuraci√≥n de Dise√±o")
            
            col_design1, col_design2 = st.columns(2)
            
            with col_design1:
                mural_paleta = st.selectbox(
                    "üåà Paleta de colores:",
                    list(PALETAS_TEXTURAS.keys()),
                    help="Paleta basada en teor√≠a del color"
                )
                
                mural_accent = st.selectbox(
                    "‚ú® Patr√≥n de acento:",
                    ['Ninguno', 'center_star', 'outer_ring', 'radial_bands'],
                    help="Patr√≥n especial en el centro del mural"
                )
            
            with col_design2:
                # Vista previa de patrones
                st.markdown("**üé® Patrones que se usar√°n:**")
                if mural_paleta in PALETAS_TEXTURAS:
                    texturas_mural = PALETAS_TEXTURAS[mural_paleta]['texturas']
                    for i, tex_name in enumerate(texturas_mural[:3]):  # M√°ximo 3
                        if tex_name in texturas_dict:
                            if i == 0:
                                st.write(f"‚Ä¢ **Tri√°ngulos delgados:** {tex_name} (color s√≥lido)")
                            elif i == 1:
                                st.write(f"‚Ä¢ **Tri√°ngulos gruesos:** {tex_name} (puntos/rayas)")
                            elif i == 2:
                                st.write(f"‚Ä¢ **Acentos:** {tex_name} (patr√≥n especial)")
            
            # Bot√≥n de generaci√≥n
            if st.button("üèóÔ∏è Generar Mural Rectangular", type="primary"):
                with st.spinner('üîÑ Generando mural rectangular para visualizaci√≥n arquitect√≥nica...'):
                    try:
                        img_rect, stats_rect = generar_mural_rectangular_penrose(
                            ancho_mural, alto_mural, mural_paleta, mural_accent, lado_triangulo, texturas_dict
                        )
                        
                        if img_rect:
                            st.session_state['mural_rectangular'] = img_rect
                            st.session_state['stats_rectangular'] = stats_rect
                            st.success("‚úÖ Mural rectangular generado!")
                            st.rerun()
                        else:
                            st.error("‚ùå Error generando el mural rectangular")
                    except Exception as e:
                        st.error(f"‚ùå Error: {str(e)}")
            
                            # Mostrar resultado
            if 'mural_rectangular' in st.session_state:
                img_rect = st.session_state['mural_rectangular']
                stats_rect = st.session_state['stats_rectangular']
                
                st.markdown("#### üñºÔ∏è Mural Rectangular Generado")
                
                # Vista previa optimizada para Streamlit
                st.markdown(f"""
                    **üìä Informaci√≥n de generaci√≥n:**
                    ‚Ä¢ Resoluci√≥n generada: {stats_rect['dimensiones_px'][0]} √ó {stats_rect['dimensiones_px'][1]} px
                    ‚Ä¢ DPI efectivo: {stats_rect['dpi']:.1f}
                    ‚Ä¢ Total p√≠xeles: {stats_rect['dimensiones_px'][0] * stats_rect['dimensiones_px'][1]:,}
                    ‚Ä¢ √Årea: {stats_rect['area_m2']:.2f} m¬≤
                """)
                
                # Crear thumbnail para visualizaci√≥n segura
                display_img = img_rect.copy()
                
                # Redimensionar para visualizaci√≥n si es muy grande
                if display_img.size[0] > 1200 or display_img.size[1] > 800:
                    display_img.thumbnail((1200, 800), Image.Resampling.LANCZOS)
                    st.info(f"Vista previa redimensionada a {display_img.size[0]}√ó{display_img.size[1]} px para visualizaci√≥n")
                
                # Mostrar imagen
                st.image(display_img, 
                        caption=f"Mural {stats_rect['dimensiones_cm'][0]}√ó{stats_rect['dimensiones_cm'][1]} cm - Paleta: {stats_rect['paleta']}", 
                        use_container_width=True)
                
                # Control de zoom para detalles
                if st.button("üîç Ver Detalle del Centro"):
                    # Crear recorte del centro
                    w, h = img_rect.size
                    center_crop = img_rect.crop((w//3, h//3, 2*w//3, 2*h//3))
                    
                    st.image(center_crop, 
                            caption="Vista de detalle - Regi√≥n central", 
                            use_container_width=True)
                    
                    st.info("üî¨ Esta vista muestra la calidad real de los patrones y la definici√≥n de cada tri√°ngulo.")
                
                # Informaci√≥n del mural
                col_info1, col_info2 = st.columns(2)
                
                with col_info1:
                    st.markdown("#### üìä Especificaciones T√©cnicas")
                    area_total_segura = calcular_area_segura(stats_rect)
                    dpi_seguro = obtener_dpi_seguro(stats_rect)
                    
                    st.write(f"**Dimensiones:** {stats_rect['dimensiones_cm'][0]} √ó {stats_rect['dimensiones_cm'][1]} cm")
                    st.write(f"**Resoluci√≥n generada:** {stats_rect['dimensiones_px'][0]} √ó {stats_rect['dimensiones_px'][1]} px")
                    st.write(f"**DPI:** {dpi_seguro} (auto-optimizado)")
                    st.write(f"**Total tri√°ngulos:** {stats_rect['total_triangulos']}")
                    st.write(f"**Tama√±o de pieza:** {stats_rect['lado_triangulo_cm']} cm")
                    st.write(f"**√Årea total:** {area_total_segura:.2f} m¬≤")
                
                with col_info2:
                    st.markdown("#### üßÆ Lista de Materiales")
                    
                    contadores = stats_rect['contadores']
                    
                    # Crear tabla de materiales
                    materiales_data = []
                    
                    for categoria, items in contadores.items():
                        for tex_name, cantidad in items.items():
                            if cantidad > 0:
                                if categoria == 'thin':
                                    tipo = "Delgado (s√≥lido)"
                                elif categoria == 'thick':
                                    tipo = "Grueso (patr√≥n)"
                                else:
                                    tipo = "Acento (especial)"
                                
                                materiales_data.append({
                                    'Textura': tex_name,
                                    'Tipo': tipo,
                                    'Cantidad': cantidad,
                                    '√Årea (cm¬≤)': int(cantidad * stats_rect['lado_triangulo_cm']**2 * 0.4)
                                })
                    
                    if materiales_data:
                        # Mostrar tabla de materiales
                        st.write("**Lista de materiales necesarios:**")
                        for item in materiales_data:
                            st.write(f"‚Ä¢ **{item['Textura']}** ({item['Tipo']}): {item['Cantidad']} piezas - {item['√Årea (cm¬≤)']} cm¬≤")
                        
                        # Resumen total
                        total_area = sum(item['√Årea (cm¬≤)'] for item in materiales_data)
                        st.write(f"**√Årea total de tri√°ngulos:** {total_area/10000:.2f} m¬≤")
                    else:
                        st.write("No se generaron materiales")
                
                # Opciones de exportaci√≥n
                st.markdown("#### üì§ Exportaci√≥n")
                
                col_export1, col_export2 = st.columns(2)
                
                with col_export1:
                    st.markdown("**üñºÔ∏è Imagen para Visualizaci√≥n:**")
                    filename_viz = f"mural_rectangular_{stats_rect['paleta']}_{ancho_mural}x{alto_mural}cm.png"
                    download_link_viz = create_download_link(img_rect, filename_viz)
                    st.markdown(download_link_viz, unsafe_allow_html=True)
                    
                    st.info("""
                    **üí° Uso recomendado:**
                    ‚Ä¢ Importar a D5 Render como textura
                    ‚Ä¢ Aplicar a superficies arquitect√≥nicas
                    ‚Ä¢ Visualizaci√≥n de proyectos
                    """)
                
                with col_export2:
                    if materiales_data:
                        st.markdown("**üìã Lista de Materiales (CSV):**")
                        
                        # Crear CSV de materiales
                        import io
                        import csv
                        
                        csv_buffer = io.StringIO()
                        csv_writer = csv.DictWriter(csv_buffer, fieldnames=['Textura', 'Tipo', 'Cantidad', '√Årea (cm¬≤)'])
                        csv_writer.writeheader()
                        csv_writer.writerows(materiales_data)
                        csv_content = csv_buffer.getvalue()
                        
                        csv_b64 = base64.b64encode(csv_content.encode()).decode()
                        csv_href = f'<a href="data:text/csv;base64,{csv_b64}" download="materiales_mural_{ancho_mural}x{alto_mural}.csv">üì• Descargar Lista de Materiales</a>'
                        st.markdown(csv_href, unsafe_allow_html=True)
                        
                        st.info("""
                        **üìä Contenido del CSV:**
                        ‚Ä¢ Lista completa de piezas necesarias
                        ‚Ä¢ Tipos y cantidades por textura
                        ‚Ä¢ C√°lculo de √°reas por categor√≠a
                        """)
                
                # Bot√≥n para generar alta resoluci√≥n
                st.markdown("#### üîç Versi√≥n de Alta Resoluci√≥n")
                
                col_hires1, col_hires2 = st.columns(2)
                
                with col_hires1:
                    dpi_seleccionado = st.selectbox(
                        "Calidad de impresi√≥n:",
                        [
                            (100, "Visualizaci√≥n (100 DPI)"),
                            (150, "Impresi√≥n b√°sica (150 DPI)"),
                            (200, "Impresi√≥n media (200 DPI)"),
                            (300, "Impresi√≥n profesional (300 DPI)")
                        ],
                        index=2,
                        format_func=lambda x: x[1]
                    )
                    
                    # Calcular tama√±o estimado
                    dpi_valor = dpi_seleccionado[0]
                    px_estimado_ancho = int(ancho_mural * dpi_valor / 2.54)
                    px_estimado_alto = int(alto_mural * dpi_valor / 2.54)
                    pixels_totales = px_estimado_ancho * px_estimado_alto
                    mb_estimados = (pixels_totales * 3) / (1024 * 1024)
                
                with col_hires2:
                    st.markdown(f"""
                        **üìê Estimaci√≥n para {dpi_valor} DPI:**
                        ‚Ä¢ Resoluci√≥n: {px_estimado_ancho:,} √ó {px_estimado_alto:,} px
                        ‚Ä¢ Total p√≠xeles: {pixels_totales:,}
                        ‚Ä¢ Tama√±o archivo: ~{mb_estimados:.1f} MB
                        ‚Ä¢ Tiempo estimado: ~{max(1, int(mb_estimados/20))} minutos
                    """)
                    
                    if pixels_totales > 50_000_000:
                        st.warning("‚ö†Ô∏è Resoluci√≥n muy alta. La generaci√≥n puede tardar mucho tiempo.")
                    elif pixels_totales > 25_000_000:
                        st.info("üí° Resoluci√≥n alta. Se aplicar√°n optimizaciones autom√°ticas.")
                
                if st.button(f"üìê Generar Versi√≥n {dpi_seleccionado[1]}", help="Genera una versi√≥n optimizada para impresi√≥n"):
                    with st.spinner(f'üîÑ Generando versi√≥n de {dpi_valor} DPI (puede tardar unos minutos)...'):
                        try:
                            # Generar versi√≥n de alta resoluci√≥n con DPI espec√≠fico
                            img_hires, stats_hires = generar_mural_rectangular_penrose(
                                ancho_mural, alto_mural, mural_paleta, mural_accent, lado_triangulo, texturas_dict, dpi_valor
                            )
                            
                            if img_hires:
                                # Mostrar informaci√≥n de la versi√≥n de alta resoluci√≥n
                                dpi_hires_seguro = obtener_dpi_seguro(stats_hires)
                                
                                st.success("‚úÖ Versi√≥n de alta resoluci√≥n generada!")
                                st.write(f"**Resoluci√≥n real:** {img_hires.size[0]} √ó {img_hires.size[1]} px")
                                st.write(f"**DPI efectivo:** {dpi_hires_seguro}")
                                actual_mb = (img_hires.size[0] * img_hires.size[1] * 3 / 1024 / 1024)
                                st.write(f"**Tama√±o de archivo:** ~{actual_mb:.1f} MB")
                                
                                dpi_hires_num = stats_hires.get('dpi', 0)
                                if isinstance(dpi_hires_num, (int, float)) and dpi_hires_num < dpi_valor:
                                    st.info(f"üí° Resoluci√≥n optimizada autom√°ticamente de {dpi_valor} a {dpi_hires_num:.1f} DPI para evitar archivos excesivos.")
                                
                                # Vista previa thumbnail
                                thumb = img_hires.copy()
                                thumb.thumbnail((600, 400), Image.Resampling.LANCZOS)
                                st.image(thumb, caption=f"Vista previa de {dpi_hires_seguro} DPI", width=400)
                                
                                # Descarga de alta resoluci√≥n
                                filename_hires = f"mural_HIRES_{stats_rect['paleta']}_{ancho_mural}x{alto_mural}cm_{dpi_hires_seguro}dpi.png"
                                download_link_hires = create_download_link(img_hires, filename_hires)
                                st.markdown(download_link_hires, unsafe_allow_html=True)
                                
                                # Informaci√≥n de uso
                                dpi_value_safe = stats_hires.get('dpi', 0)
                                if isinstance(dpi_value_safe, (int, float)):
                                    if dpi_value_safe >= 200:
                                        st.success("‚úÖ Calidad perfecta para impresi√≥n profesional y visualizaci√≥n arquitect√≥nica.")
                                    elif dpi_value_safe >= 150:
                                        st.info("üí° Calidad buena para impresi√≥n est√°ndar y visualizaci√≥n.")
                                    else:
                                        st.warning("‚ö†Ô∏è Resoluci√≥n optimizada para visualizaci√≥n r√°pida. Para impresi√≥n usar 200+ DPI.")
                                else:
                                    st.info("üí° Resoluci√≥n optimizada autom√°ticamente para mejor rendimiento.")
                            else:
                                st.error("‚ùå Error generando versi√≥n de alta resoluci√≥n")
                        except Exception as e:
                            st.error(f"‚ùå Error: {str(e)}")
                            st.info("üí° Si el error persiste, intenta recargar la p√°gina y generar nuevamente.")
                            st.info("üí° Si persiste el error, usa una dimensi√≥n menor o DPI m√°s bajo.")
            
            else:
                st.markdown("""
                    <div class="pattern-preview">
                        <h4>üéØ Configuraci√≥n Lista para Mural Rectangular</h4>
                        <p>Sistema dise√±ado para:</p>
                        <ul>
                            <li><strong>Visualizaci√≥n arquitect√≥nica</strong> - Compatible con D5 Render</li>
                            <li><strong>C√°lculo de materiales</strong> - Lista completa de piezas necesarias</li>
                            <li><strong>Patrones simples</strong> - Colores s√≥lidos, puntos y rayas</li>
                            <li><strong>Exportaci√≥n profesional</strong> - M√∫ltiples formatos y resoluciones</li>
                        </ul>
                        <p>Haz clic en "Generar Mural Rectangular" para empezar.</p>
                    </div>
                """, unsafe_allow_html=True)
        
        else:
            st.error("‚ùå No hay texturas disponibles para generar murales rectangulares")

    with tab4:
        st.markdown("### üìö Galer√≠a de Patrones con Texturas")
        
        if texturas_dict:
            # Generar ejemplos de cada paleta
            st.markdown("#### üé® Ejemplos de Cada Paleta")
            
            for paleta_nombre in PALETAS_TEXTURAS.keys():
                with st.expander(f"Ver ejemplo de paleta: {paleta_nombre}"):
                    paleta_info = PALETAS_TEXTURAS[paleta_nombre]
                    
                    col1, col2 = st.columns([1, 2])
                    
                    with col1:
                        st.write(f"**{paleta_info['descripcion']}**")
                        st.write(f"*{paleta_info['teoria']}*")
                        
                        # Vista previa
                        preview_img = crear_vista_previa_paleta(paleta_nombre, texturas_dict)
                        if preview_img:
                            st.image(preview_img, caption="Vista previa de texturas", use_container_width=True)
                        
                        if st.button(f"Generar ejemplo {paleta_nombre}", key=f"gallery_{paleta_nombre}"):
                            with st.spinner(f'Generando ejemplo de {paleta_nombre}...'):
                                img, stats = generate_penrose_tiles_with_textures(
                                    5, (1600, 1600), paleta_nombre, None, 0.002, 2.0, texturas_dict
                                )
                                
                                if img:
                                    # Guardar en session state con clave √∫nica
                                    st.session_state[f'gallery_img_{paleta_nombre}'] = img
                                    st.session_state[f'gallery_stats_{paleta_nombre}'] = stats
                                    st.rerun()
                    
                    with col2:
                        # Mostrar imagen generada si existe
                        if f'gallery_img_{paleta_nombre}' in st.session_state:
                            img = st.session_state[f'gallery_img_{paleta_nombre}']
                            stats = st.session_state[f'gallery_stats_{paleta_nombre}']
                            
                            st.image(img, caption=f"Ejemplo: {paleta_nombre}", use_container_width=True)
                            st.write(f"**Piezas totales:** {stats['total_pieces']}")
                            
                            # Bot√≥n de descarga
                            filename = f"gallery_{paleta_nombre}_example.png"
                            download_link = create_download_link(img, filename)
                            st.markdown(download_link, unsafe_allow_html=True)
        else:
            st.error("‚ùå No hay texturas disponibles para la galer√≠a")
    
    # Footer con informaci√≥n
    st.markdown("---")
    st.markdown("""
        <div style='text-align: center; color: #666;'>
            <p>üé® Generador de Mosaicos Penrose con Texturas Individuales | Cada Tri√°ngulo = Una Pieza</p>
            <p>üí° Paletas dise√±adas siguiendo principios de armon√≠a crom√°tica</p>
            <p>üß© Cada tri√°ngulo es independiente - perfecto para corte e impresi√≥n</p>
            <p>üîß Tecnolog√≠as: Streamlit, Cairo, PIL, NumPy</p>
        </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()